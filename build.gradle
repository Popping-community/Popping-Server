import java.text.SimpleDateFormat

plugins {
	id 'java'
	id 'com.google.cloud.tools.jib' version '3.4.0'
	id 'jacoco'
	id 'checkstyle'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.sonarqube" version "6.0.1.5171"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jib {
	from {
		image = "eclipse-temurin:21-jdk-alpine"
	}
	to {
		image = "chooh1010/popping-community"
		tags = ['latest', new SimpleDateFormat('yyyyMMddHHmmss').format(System.currentTimeMillis())]
	}
	container {
		environment = [TZ: "Asia/Seoul"]
		jvmFlags = ['-Dspring.profiles.active=dev', '-XX:+UseContainerSupport', '-Dfile.encoding=UTF-8', '-Duser.timezone="Asia/Seoul"']
	}
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j'
}

checkstyle {
	configFile = file("${rootDir}/naver-checkstyle.xml")
	configProperties = ["suppressionFile": "${rootDir}/naver-checkstyle-suppressions.xml"]
	toolVersion = "9.2"
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}

def versionFromArg = System.getProperty("sonar.projectVersion", "0.0.1-SNAPSHOT")
println "ðŸ‘‰ sonar.projectVersion (from CLI arg or fallback): $versionFromArg"

sonar {
	properties {
		property "sonar.projectKey", "Popping-community_Popping-Server"
		property "sonar.organization", "popping-community"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.java.checkstyle.reportPaths", "build/reports/checkstyle/main.xml"
		property "sonar.projectVersion", versionFromArg
	}
}
