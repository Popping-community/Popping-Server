name: CI/CD with SonarQube (JDK 21)

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read

jobs:
  build:
    name: Build, Analyze and Deploy (JDK 21)
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # SonarQube 분석을 위한 전체 히스토리 필요

      # JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # SonarQube 분석 캐시
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Gradle 캐시
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      # ✅ application.properties 생성 (여기!)
      - name: Set up application.properties
        run: |
          echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties

      # SonarQube 분석
      - name: SonarQube Analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          ./gradlew build sonar \
            -Dsonar.projectVersion=${{ github.run_number }} \
            --info

      # Gradle 설정
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Jib로 Docker 이미지 빌드 및 Push
      - name: Build and Push with Jib
        run: ./gradlew :jib

      # SSH를 통한 원격 배포
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_IP }}
          username: ${{ secrets.REMOTE_SSH_ID }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: ${{ secrets.REMOTE_SSH_PORT }}
          script_stop: true         # 실패 시 멈춤
          debug: true               # 디버그 출력 활성화
          script: |
            echo "✅ Connected to server"
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            echo "✅ Docker login success"
            docker-compose pull
            echo "✅ Docker images pulled"
            docker-compose up -d
            echo "✅ Docker containers started"